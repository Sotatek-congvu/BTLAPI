
import React, { useState, useEffect, useRef } from 'react';
import { MessageSquare, Send, Paperclip } from 'lucide-react';
import Header from '@/components/Header';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { useToast } from '@/hooks/use-toast';
import { consultationService, Message } from '@/services/consultationService';

const Consultation: React.FC = () => {
  const { success, error } = useToast();
  const [message, setMessage] = useState('');
  const [messages, setMessages] = useState<Message[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  // Load initial messages
  useEffect(() => {
    const loadInitialMessages = async () => {
      try {
        // In a real-world scenario, this would call the API
        // For demonstration, we'll use mock data
        
        // Uncomment for production with real API
        // const history = await consultationService.getConversationHistory();
        // if (history.length > 0) {
        //   setMessages(history[0].messages);
        // } else {
        //   // Set default welcome message
        //   setMessages([
        //     {
        //       id: 1,
        //       content: 'Ch√†o! M√¨nh l√† CDKAce, tr·ª£ l√Ω ·∫£o ƒë∆∞·ª£c thi·∫øt k·∫ø ri√™ng ƒë·ªÉ h·ªó tr·ª£ b·∫°n h·ªçc ti·∫øng Anh. üòä',
        //       isUser: false,
        //       timestamp: new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })
        //     }
        //   ]);
        // }
        
        // Mock data
        setMessages([
          {
            id: 1,
            content: 'Ch√†o! M√¨nh l√† CDKAce, tr·ª£ l√Ω ·∫£o ƒë∆∞·ª£c thi·∫øt k·∫ø ri√™ng ƒë·ªÉ h·ªó tr·ª£ b·∫°n h·ªçc ti·∫øng Anh n√®. üòä\n\nM√¨nh lu√¥n c·ªë g·∫Øng h·ªó tr·ª£ b·∫°n t·ªët nh·∫•t, nh∆∞ng ƒë√¥i khi v·∫´n c√≥ th·ªÉ m·∫Øc sai s√≥t, n√™n b·∫°n nh·ªõ ki·ªÉm tra l·∫°i nh·ªØng th√¥ng tin quan tr·ªçng nha!',
            isUser: false,
            timestamp: '10:08 PM'
          }
        ]);
      } catch (err) {
        console.error('Error loading conversation history:', err);
        error('Kh√¥ng th·ªÉ t·∫£i l·ªãch s·ª≠ tr√≤ chuy·ªán', 'Vui l√≤ng th·ª≠ l·∫°i sau');
      }
    };
    
    loadInitialMessages();
  }, [error]);

  // Scroll to bottom when messages change
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  const handleSendMessage = async () => {
    if (!message.trim()) return;
    
    const newMessage: Message = {
      id: Date.now(),
      content: message,
      isUser: true,
      timestamp: new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })
    };
    
    setMessages(prev => [...prev, newMessage]);
    setMessage('');
    setIsLoading(true);
    
    try {
      // In a real-world scenario, this would call the API
      // For demonstration, we'll simulate an API call with a timeout
      
      // Uncomment for production with real API
      // const response = await consultationService.sendMessage(message.trim());
      // setMessages(prev => [...prev, response]);
      
      // Mock response
      setTimeout(() => {
        const botResponse: Message = {
          id: Date.now() + 1,
          content: 'C·∫£m ∆°n b·∫°n ƒë√£ nh·∫Øn tin! T√¥i r·∫•t vui ƒë∆∞·ª£c h·ªó tr·ª£ b·∫°n h·ªçc ti·∫øng Anh. B·∫°n c√≥ th·ªÉ h·ªèi t√¥i b·∫•t k·ª≥ c√¢u h·ªèi n√†o v·ªÅ ng·ªØ ph√°p, t·ª´ v·ª±ng, ho·∫∑c c√°ch di·ªÖn ƒë·∫°t. T√¥i s·∫Ω c·ªë g·∫Øng gi√∫p b·∫°n hi·ªÉu r√µ h∆°n v·ªÅ ti·∫øng Anh.',
          isUser: false,
          timestamp: new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })
        };
        
        setMessages(prev => [...prev, botResponse]);
        setIsLoading(false);
      }, 1500);
      
    } catch (err) {
      console.error('Error sending message:', err);
      error('Kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn', 'Vui l√≤ng th·ª≠ l·∫°i sau');
      setIsLoading(false);
    }
  };

  const handleKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  const handleClearConversation = async () => {
    try {
      // In a real-world scenario, this would call the API
      // await consultationService.clearConversation();
      
      // For demonstration
      setMessages([
        {
          id: Date.now(),
          content: 'Cu·ªôc tr√≤ chuy·ªán ƒë√£ ƒë∆∞·ª£c l√†m m·ªõi. B·∫°n c√≥ th·ªÉ b·∫Øt ƒë·∫ßu cu·ªôc tr√≤ chuy·ªán m·ªõi!',
          isUser: false,
          timestamp: new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })
        }
      ]);
      
      success('ƒê√£ x√≥a cu·ªôc tr√≤ chuy·ªán', 'Cu·ªôc tr√≤ chuy·ªán ƒë√£ ƒë∆∞·ª£c l√†m m·ªõi');
    } catch (err) {
      console.error('Error clearing conversation:', err);
      error('Kh√¥ng th·ªÉ x√≥a cu·ªôc tr√≤ chuy·ªán', 'Vui l√≤ng th·ª≠ l·∫°i sau');
    }
  };

  return (
    <div className="min-h-screen flex flex-col">
      <Header />
      <main className="flex-1 container max-w-screen-xl mx-auto py-4 px-4 flex flex-col">
        <div className="flex-1 bg-white rounded-lg shadow-sm overflow-hidden flex flex-col">
          <div className="border-b p-4 flex items-center justify-between">
            <div className="flex items-center gap-2">
              <div className="w-10 h-10 bg-engace-orange rounded-lg flex items-center justify-center">
                <MessageSquare size={20} color="white" />
              </div>
              <h2 className="font-semibold text-lg">T∆∞ v·∫•n v·ªõi CDKAce</h2>
            </div>
            <Button 
              variant="outline" 
              size="sm" 
              className="text-red-500 hover:text-red-600 hover:bg-red-50"
              onClick={handleClearConversation}
            >
              X√≥a cu·ªôc tr√≤ chuy·ªán
            </Button>
          </div>
          
          <div className="flex-1 overflow-y-auto p-4 space-y-4">
            {messages.map(msg => (
              <div 
                key={msg.id} 
                className={`max-w-3xl ${msg.isUser ? 'ml-auto' : ''}`}
              >
                <div 
                  className={`rounded-2xl p-4 ${
                    msg.isUser 
                      ? 'bg-blue-100 text-right' 
                      : 'bg-orange-100'
                  }`}
                >
                  <p className="whitespace-pre-line">{msg.content}</p>
                </div>
                <div className="text-xs text-gray-500 mt-1">
                  {msg.timestamp}
                </div>
              </div>
            ))}
            {isLoading && (
              <div className="max-w-3xl">
                <div className="bg-orange-100 rounded-2xl p-4">
                  <div className="flex space-x-2">
                    <div className="w-3 h-3 rounded-full bg-gray-400 animate-bounce"></div>
                    <div className="w-3 h-3 rounded-full bg-gray-400 animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                    <div className="w-3 h-3 rounded-full bg-gray-400 animate-bounce" style={{ animationDelay: '0.4s' }}></div>
                  </div>
                </div>
              </div>
            )}
            <div ref={messagesEndRef} />
          </div>
          
          <div className="border-t p-4">
            <div className="flex gap-2">
              <div className="flex-1 relative">
                <Input
                  placeholder="Shift + Enter ƒë·ªÉ xu·ªëng d√≤ng"
                  className="pr-10 py-6 rounded-xl"
                  value={message}
                  onChange={(e) => setMessage(e.target.value)}
                  onKeyDown={handleKeyDown}
                  disabled={isLoading}
                />
                <Button variant="ghost" className="absolute right-2 top-1/2 transform -translate-y-1/2">
                  <Paperclip size={20} className="text-gray-400" />
                </Button>
              </div>
              <Button 
                className="bg-engace-orange hover:bg-engace-orange/90 rounded-xl px-4"
                onClick={handleSendMessage}
                disabled={isLoading || !message.trim()}
              >
                <Send size={20} />
              </Button>
            </div>
            <div className="flex justify-between mt-4">
              <Button variant="outline" className="flex-1 mr-2">
                ƒê√≠nh k√®m ·∫£nh
              </Button>
              <Button variant="outline" className="flex-1 mr-2">
                Suy lu·∫≠n s√¢u
              </Button>
              <Button variant="outline" className="flex-1">
                T√¨m ki·∫øm tr√™n Google
              </Button>
            </div>
          </div>
        </div>
      </main>
    </div>
  );
};

export default Consultation;
