
import React, { useState } from 'react';
import { MessageSquare, Send, Paperclip } from 'lucide-react';
import Header from '@/components/Header';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';

type Message = {
  id: number;
  content: string;
  isUser: boolean;
  timestamp: string;
};

const Consultation: React.FC = () => {
  const [message, setMessage] = useState('');
  const [messages, setMessages] = useState<Message[]>([
    {
      id: 1,
      content: 'Ch√†o Cong! M√¨nh l√† EngAce, tr·ª£ l√Ω ·∫£o ƒë∆∞·ª£c thi·∫øt k·∫ø ri√™ng ƒë·ªÉ h·ªó tr·ª£ b·∫°n h·ªçc ti·∫øng Anh n√®. üòä\n\nM√¨nh lu√¥n c·ªë g·∫Øng h·ªó tr·ª£ b·∫°n t·ªët nh·∫•t, nh∆∞ng ƒë√¥i khi v·∫´n c√≥ th·ªÉ m·∫Øc sai s√≥t, n√™n b·∫°n nh·ªõ ki·ªÉm tra l·∫°i nh·ªØng th√¥ng tin quan tr·ªçng nha!',
      isUser: false,
      timestamp: '10:08 PM'
    },
    {
      id: 2,
      content: 'hi',
      isUser: true,
      timestamp: '10:08 PM'
    },
    {
      id: 3,
      content: 'Ch√†o Cong! ‚ú®\n\nM√¨nh r·∫•t vui khi ƒë∆∞·ª£c g·∫∑p b·∫°n! B·∫°n ƒë√£ s·∫µn s√†ng b·∫Øt ƒë·∫ßu bu·ªïi h·ªçc ti·∫øng Anh ƒë·∫ßu ti√™n v·ªõi m√¨nh ch∆∞a?\n\nM√¨nh s·∫Ω lu√¥n ·ªü ƒë√¢y ƒë·ªÉ gi√∫p b·∫°n h·ªçc ti·∫øng Anh m·ªôt c√°ch d·ªÖ d√†ng v√† hi·ªáu qu·∫£. B·∫°n c√≥ c√¢u h·ªèi g√¨ kh√¥ng? Ho·∫∑c b·∫°n mu·ªën b·∫Øt ƒë·∫ßu t·ª´ ƒë√¢u? M√¨nh c√≥ th·ªÉ gi√∫p b·∫°n √¥n l·∫°i b·∫£ng ch·ªØ c√°i, c√°ch ph√°t √¢m, hay ƒë∆°n gi·∫£n l√† l√†m quen v·ªõi nh·ªØng c√¢u ch√†o h·ªèi th∆∞·ªùng ng√†y nh√©!',
      isUser: false,
      timestamp: '10:09 PM'
    }
  ]);

  const handleSendMessage = () => {
    if (message.trim()) {
      const newMessage: Message = {
        id: Date.now(),
        content: message,
        isUser: true,
        timestamp: new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })
      };
      setMessages([...messages, newMessage]);
      setMessage('');
    }
  };

  const handleKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  return (
    <div className="min-h-screen flex flex-col">
      <Header />
      <main className="flex-1 container max-w-screen-xl mx-auto py-4 px-4 flex flex-col">
        <div className="flex-1 bg-white rounded-lg shadow-sm overflow-hidden flex flex-col">
          <div className="border-b p-4 flex items-center justify-between">
            <div className="flex items-center gap-2">
              <div className="w-10 h-10 bg-engace-orange rounded-lg flex items-center justify-center">
                <MessageSquare size={20} color="white" />
              </div>
              <h2 className="font-semibold text-lg">T∆∞ v·∫•n v·ªõi EngAce</h2>
            </div>
            <Button variant="outline" size="sm" className="text-red-500 hover:text-red-600 hover:bg-red-50">
              X√≥a cu·ªôc tr√≤ chuy·ªán
            </Button>
          </div>
          
          <div className="flex-1 overflow-y-auto p-4 space-y-4">
            {messages.map(msg => (
              <div 
                key={msg.id} 
                className={`max-w-3xl ${msg.isUser ? 'ml-auto' : ''}`}
              >
                <div 
                  className={`rounded-2xl p-4 ${
                    msg.isUser 
                      ? 'bg-blue-100 text-right' 
                      : 'bg-orange-100'
                  }`}
                >
                  <p className="whitespace-pre-line">{msg.content}</p>
                </div>
                <div className="text-xs text-gray-500 mt-1">
                  {msg.timestamp}
                </div>
              </div>
            ))}
          </div>
          
          <div className="border-t p-4">
            <div className="flex gap-2">
              <div className="flex-1 relative">
                <Input
                  placeholder="Shift + Enter ƒë·ªÉ xu·ªëng d√≤ng"
                  className="pr-10 py-6 rounded-xl"
                  value={message}
                  onChange={(e) => setMessage(e.target.value)}
                  onKeyDown={handleKeyDown}
                />
                <Button variant="ghost" className="absolute right-2 top-1/2 transform -translate-y-1/2">
                  <Paperclip size={20} className="text-gray-400" />
                </Button>
              </div>
              <Button 
                className="bg-engace-orange hover:bg-engace-orange/90 rounded-xl px-4"
                onClick={handleSendMessage}
              >
                <Send size={20} />
              </Button>
            </div>
            <div className="flex justify-between mt-4">
              <Button variant="outline" className="flex-1 mr-2">
                ƒê√≠nh k√®m ·∫£nh
              </Button>
              <Button variant="outline" className="flex-1 mr-2">
                Suy lu·∫≠n s√¢u
              </Button>
              <Button variant="outline" className="flex-1">
                T√¨m ki·∫øm tr√™n Google
              </Button>
            </div>
          </div>
        </div>
      </main>
    </div>
  );
};

export default Consultation;
